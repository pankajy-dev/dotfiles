[
    {
        "key": "enter",
        "command": "acceptSelectedSuggestion",
        "when": "acceptSuggestionOnEnter && suggestWidgetVisible && suggestionMakesTextEdit && textInputFocus"
    },
    {
        "key": "tab",
        "command": "acceptAlternativeSelectedSuggestion",
        "when": "suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "ctrl+shift+enter",
        "command": "runCommands",
        "args": {
            "commands": [
                "acceptSelectedSuggestion",
                { "command": "cursorMove", "args": { "to": "wrappedLineEnd" } },
                { "command": "editor.action.insertSnippet", "args": { "snippet": ";" } }
            ]
        },
        "when": "suggestWidgetVisible && textInputFocus && (editorLangId == 'javascript' || editorLangId == 'typescript') && config.javascript.format.semicolons == 'insert'"
    },
    {
        "key": "ctrl+shift+enter",
        "command": "acceptSelectedSuggestion",
        "when": "suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "ctrl+p",
        "command": "editor.action.triggerParameterHints",
        "when": "editorHasSignatureHelpProvider && editorTextFocus"
    },
    {
        "key": "ctrl+q",
        "command": "editor.action.showHover",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+f1",
        "command": "workbench.action.showErrorsWarnings",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+insert",
        "command": "editor.action.sourceAction",
        "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "alt+insert",
        "command": "workbench.action.files.newUntitledFile",
        "when": "(!editorHasCodeActionsProvider && editorTextFocus) || !editorTextFocus"
    },
    {
        "key": "ctrl+o",
        "command": "editor.action.codeAction",
        "args": { "kind": "source.overrideMethods" },
        "when": "editorLangId == java && javaLSReady && editorTextFocus"
    },
    {
        "key": "ctrl+i",
        "command": "editor.action.codeAction",
        "args": { "kind": "source.overrideMethods" },
        "when": "editorLangId == java && javaLSReady && editorTextFocus"
    },
    {
        "key": "ctrl+/",
        "command": "editor.action.commentLine",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+numpad_divide",
        "command": "editor.action.commentLine",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+shift+/",
        "command": "editor.action.blockComment",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+shift+numpad_divide",
        "command": "editor.action.blockComment",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+w",
        "command": "editor.action.smartSelect.grow",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+shift+w",
        "command": "editor.action.smartSelect.shrink",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+enter",
        "command": "editor.action.quickFix",
        "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+alt+l",
        "command": "editor.action.formatDocument",
        "when": "editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly && !inCompositeEditor"
    },
    {
        "key": "ctrl+alt+l",
        "command": "editor.action.formatSelection",
        "when": "editorHasDocumentSelectionFormattingProvider && editorHasSelection && editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+alt+o",
        "command": "editor.action.organizeImports",
        "when": "editorTextFocus && !editorReadonly && supportedCodeAction =~ /(\\s|^)source\\.organizeImports\\b/"
    },
    {
        "key": "ctrl+x",
        "command": "editor.action.clipboardCutAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+delete",
        "command": "editor.action.clipboardCutAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+d",
        "command": "editor.action.copyLinesDownAction",
        "when": "editorTextFocus && !editorReadonly && !editorHasSelection"
    },
    {
        "key": "ctrl+d",
        "command": "editor.action.duplicateSelection",
        "when": "editorTextFocus && !editorReadonly && editorHasSelection"
    },
    {
        "key": "ctrl+y",
        "command": "editor.action.deleteLines",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+shift+j",
        "command": "editor.action.joinLines",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+enter",
        "command": "lineBreakInsert",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+enter",
        "command": "editor.action.insertLineAfter",
        "when": "editorTextFocus && !editorReadonly && !notebookEditorFocused"
    },
    {
        "key": "ctrl+right",
        "command": "cursorWordRight",
        "when": "editorTextFocus && !inlineSuggestionVisible && !config.intellij-idea-keybindings.useCamelHumpsWords"
    },
    {
        "key": "ctrl+right",
        "command": "cursorWordPartRight",
        "when": "editorTextFocus && !inlineSuggestionVisible && config.intellij-idea-keybindings.useCamelHumpsWords"
    },
    {
        "key": "ctrl+left",
        "command": "cursorWordLeft",
        "when": "editorTextFocus && !config.intellij-idea-keybindings.useCamelHumpsWords"
    },
    {
        "key": "ctrl+left",
        "command": "cursorWordPartStartLeft",
        "when": "editorTextFocus && config.intellij-idea-keybindings.useCamelHumpsWords"
    },
    {
        "key": "ctrl+shift+right",
        "command": "cursorWordRightSelect",
        "when": "editorTextFocus && !config.intellij-idea-keybindings.useCamelHumpsWords"
    },
    {
        "key": "ctrl+shift+right",
        "command": "cursorWordPartRightSelect",
        "when": "editorTextFocus && config.intellij-idea-keybindings.useCamelHumpsWords"
    },
    {
        "key": "ctrl+shift+left",
        "command": "cursorWordLeftSelect",
        "when": "editorTextFocus && !config.intellij-idea-keybindings.useCamelHumpsWords"
    },
    {
        "key": "ctrl+shift+left",
        "command": "cursorWordPartStartLeftSelect",
        "when": "editorTextFocus && config.intellij-idea-keybindings.useCamelHumpsWords"
    },
    {
        "key": "ctrl+delete",
        "command": "deleteWordRight",
        "when": "editorTextFocus && !editorReadonly && !config.intellij-idea-keybindings.useCamelHumpsWords"
    },
    {
        "key": "ctrl+delete",
        "command": "deleteWordPartRight",
        "when": "editorTextFocus && !editorReadonly && config.intellij-idea-keybindings.useCamelHumpsWords"
    },
    {
        "key": "ctrl+backspace",
        "command": "deleteWordLeft",
        "when": "editorTextFocus && !editorReadonly && !config.intellij-idea-keybindings.useCamelHumpsWords"
    },
    {
        "key": "ctrl+backspace",
        "command": "deleteWordPartLeft",
        "when": "editorTextFocus && !editorReadonly && config.intellij-idea-keybindings.useCamelHumpsWords"
    },
    {
        "key": "ctrl+.",
        "command": "editor.toggleFold",
        "when": "editorFocus && foldingEnabled"
    },
    {
        "key": "ctrl+=",
        "command": "editor.unfold",
        "when": "editorFocus && foldingEnabled"
    },
    {
        "key": "ctrl+numpad_add",
        "command": "editor.unfold",
        "when": "editorFocus && foldingEnabled"
    },
    {
        "key": "ctrl+-",
        "command": "editor.fold",
        "when": "editorFocus && foldingEnabled"
    },
    {
        "key": "ctrl+numpad_subtract",
        "command": "editor.fold",
        "when": "editorFocus && foldingEnabled"
    },
    {
        "key": "ctrl+alt+=",
        "command": "editor.unfoldRecursively",
        "when": "editorFocus && foldingEnabled"
    },
    {
        "key": "ctrl+alt+numpad_add",
        "command": "editor.unfoldRecursively",
        "when": "editorFocus && foldingEnabled"
    },
    {
        "key": "ctrl+alt+-",
        "command": "editor.foldRecursively",
        "when": "editorFocus && foldingEnabled"
    },
    {
        "key": "ctrl+alt+numpad_subtract",
        "command": "editor.foldRecursively",
        "when": "editorFocus && foldingEnabled"
    },
    {
        "key": "ctrl+shift+=",
        "command": "editor.unfoldAll",
        "when": "editorFocus && foldingEnabled"
    },
    {
        "key": "ctrl+shift+numpad_add",
        "command": "editor.unfoldAll",
        "when": "editorFocus && foldingEnabled"
    },
    {
        "key": "ctrl+shift+-",
        "command": "editor.foldAll",
        "when": "editorFocus && foldingEnabled"
    },
    {
        "key": "ctrl+shift+numpad_subtract",
        "command": "editor.foldAll",
        "when": "editorFocus && foldingEnabled"
    },
    {
        "key": "ctrl+f4",
        "command": "workbench.action.closeActiveEditor"
    },
    {
        "key": "alt+j",
        "command": "editor.action.addSelectionToNextFindMatch",
        "when": "editorFocus"
    },
    {
        "key": "alt+shift+j",
        "command": "cursorUndo",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+down",
        "command": "editor.action.moveLinesDownAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+alt+up",
        "command": "editor.action.moveLinesUpAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+alt+insert",
        "command": "editor.action.toggleColumnSelection"
    },
    {
        "key": "shift+alt+.",
        "command": "editor.action.fontZoomIn",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+,",
        "command": "editor.action.fontZoomOut",
        "when": "editorTextFocus"
    },
    {
        "key": "shift shift",
        "command": "workbench.action.quickOpen"
    },
    {
        "key": "f3",
        "command": "editor.action.nextMatchFindAction",
        "when": "editorFocus"
    },
    {
        "key": "shift+f3",
        "command": "editor.action.previousMatchFindAction",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+r",
        "command": "editor.action.startFindReplaceAction",
        "when": "editorFocus || editorIsOpen"
    },
    {
        "key": "ctrl+shift+f",
        "command": "workbench.action.findInFiles",
        "when": "!explorerResourceIsFolder || !filesExplorerFocus"
    },
    {
        "key": "ctrl+shift+f",
        "command": "filesExplorer.findInFolder",
        "when": "explorerResourceIsFolder && filesExplorerFocus"
    },
    {
        "key": "ctrl+shift+r",
        "command": "workbench.action.replaceInFiles"
    },
    {
        "key": "alt+f7",
        "command": "references-view.findReferences",
        "when": "editorHasReferenceProvider"
    },
    {
        "key": "alt+ctrl+f7",
        "command": "editor.action.referenceSearch.trigger",
        "when": "editorHasReferenceProvider && editorTextFocus && !inReferenceSearchEditor"
    },
    {
        "key": "ctrl+f9",
        "command": "workbench.action.tasks.build"
    },
    {
        "key": "alt+shift+f10",
        "command": "workbench.action.tasks.runTask",
        "when": "taskCommandsRegistered && !terminalFocus"
    },
    {
        "key": "alt+shift+f9",
        "command": "workbench.view.debug"
    },
    {
        "key": "ctrl ctrl",
        "command": "workbench.action.tasks.runTask",
        "when": "taskCommandsRegistered && !terminalFocus"
    },
    {
        "key": "shift+f10",
        "command": "workbench.action.tasks.reRunTask",
        "when": "taskCommandsRegistered && !terminalFocus"
    },
    {
        "key": "shift+f9",
        "command": "workbench.action.debug.run",
        "when": "debuggersAvailable && !inDebugMode && !terminalFocus"
    },
    {
        "key": "ctrl+f2",
        "command": "workbench.action.debug.stop",
        "when": "inDebugMode && !focusedSessionIsAttach"
    },
    {
        "key": "f8",
        "command": "workbench.action.debug.stepOver",
        "when": "debugState == 'stopped'"
    },
    {
        "key": "f7",
        "command": "workbench.action.debug.stepInto",
        "when": "debugState != 'inactive'"
    },
    {
        "key": "shift+f8",
        "command": "workbench.action.debug.stepOut",
        "when": "debugState == 'stopped'"
    },
    {
        "key": "alt+f9",
        "command": "editor.debug.action.runToCursor",
        "when": "debugState == 'stopped'"
    },
    {
        "key": "alt+f8",
        "command": "workbench.debug.action.toggleRepl",
        "when": "debuggersAvailable"
    },
    {
        "key": "alt+f8",
        "command": "editor.debug.action.selectionToRepl",
        "when": "debuggersAvailable && editorTextFocus && editorHasSelection"
    },
    {
        "key": "f9",
        "command": "workbench.action.debug.continue",
        "when": "inDebugMode"
    },
    {
        "key": "ctrl+f8",
        "command": "editor.debug.action.toggleBreakpoint",
        "when": "debuggersAvailable && editorTextFocus"
    },
    {
        "key": "ctrl+shift+f8",
        "command": "workbench.debug.action.focusBreakpointsView"
    },
    {
        "key": "ctrl+n",
        "command": "workbench.action.showAllSymbols"
    },
    {
        "key": "ctrl+shift+n",
        "command": "workbench.action.quickOpen"
    },
    {
        "key": "ctrl+alt+shift+n",
        "command": "workbench.action.gotoSymbol",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+left",
        "command": "workbench.action.previousEditor"
    },
    {
        "key": "alt+right",
        "command": "workbench.action.nextEditor"
    },
    {
        "key": "shift+escape",
        "command": "workbench.action.toggleSidebarVisibility",
        "when": "sideBarFocus"
    },
    {
        "key": "shift+escape",
        "command": "workbench.action.toggleAuxiliaryBar",
        "when": "auxiliaryBarFocus"
    },
    {
        "key": "shift+escape",
        "command": "workbench.action.togglePanel",
        "when": "panelFocus"
    },
    {
        "key": "ctrl+shift+'",
        "command": "workbench.action.toggleMaximizedPanel",
        "when": "problemFocus || focusedView == 'workbench.panel.output' || inDebugRepl || terminalFocus"
    },
    {
        "key": "ctrl+g",
        "command": "workbench.action.gotoLine"
    },
    {
        "key": "ctrl+e",
        "command": "workbench.action.quickOpen",
        "when": "!inQuickOpen"
    },
    {
        "key": "ctrl+e",
        "command": "workbench.action.quickOpenNavigateNextInRecentFilesPicker",
        "when": "inQuickOpen"
    },
    {
        "key": "ctrl+shift+e",
        "command": "workbench.action.quickOpenNavigatePreviousInRecentFilesPicker",
        "when": "inQuickOpen"
    },
    {
        "key": "ctrl+alt+left",
        "command": "workbench.action.navigateBack",
        "when": "canNavigateBack"
    },
    {
        "key": "ctrl+alt+right",
        "command": "workbench.action.navigateForward",
        "when": "canNavigateForward"
    },
    {
        "key": "ctrl+shift+backspace",
        "command": "workbench.action.navigateToLastEditLocation"
    },
    {
        "key": "ctrl+b",
        "command": "editor.action.goToDeclaration",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+alt+b",
        "command": "editor.action.goToImplementation",
        "when": "editorHasImplementationProvider && editorTextFocus && !isInEmbeddedEditor"
    },
    {
        "key": "ctrl+u",
        "command": "java.action.navigateToSuperImplementation",
        "when": "editorLangId == java && javaLSReady && editorHasImplementationProvider && editorTextFocus && !isInEmbeddedEditor"
    },
    {
        "key": "ctrl+shift+i",
        "command": "editor.action.previewDeclaration"
    },
    {
        "key": "ctrl+shift+b",
        "command": "editor.action.goToTypeDefinition",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+7",
        "command": "outline.focus"
    },
    {
        "key": "ctrl+f12",
        "command": "workbench.action.gotoSymbol",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+h",
        "command": "java.action.showTypeHierarchy",
        "when": "editorLangId == java && javaLSReady && editorTextFocus"
    },
    {
        "key": "ctrl+alt+h",
        "command": "references-view.showCallHierarchy",
        "when": "editorHasCallHierarchyProvider"
    },
    {
        "key": "f2",
        "command": "editor.action.marker.next",
        "when": "editorFocus"
    },
    {
        "key": "shift+f2",
        "command": "editor.action.marker.prev",
        "when": "editorFocus"
    },
    {
        "key": "f4",
        "command": "editor.action.goToDeclaration",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+enter",
        "command": "editor.action.goToDeclaration",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+ctrl+down",
        "command": "editor.action.moveLinesDownAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+ctrl+up",
        "command": "editor.action.moveLinesUpAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+alt+shift+down",
        "command": "workbench.action.editor.nextChange",
        "when": "editorTextFocus && !textCompareEditorActive"
    },
    {
        "key": "ctrl+alt+shift+up",
        "command": "workbench.action.editor.previousChange",
        "when": "editorTextFocus && !textCompareEditorActive"
    },
    {
        "key": "ctrl+home",
        "command": "cursorTop",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+end",
        "command": "cursorBottom",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+shift+m",
        "command": "editor.action.jumpToBracket",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+shift+t",
        "command": "java.test.goToTest",
        "when": "editorTextFocus && java:testRunnerActivated"
    },
    {
        "key": "ctrl+alt+shift+t",
        "command": "editor.action.refactor",
        "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "f6",
        "command": "editor.action.codeAction",
        "args": { "kind": "refactor.move" },
        "when": "editorTextFocus"
    },
    {
        "key": "shift+f6",
        "command": "editor.action.rename",
        "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+f6",
        "command": "editor.action.codeAction",
        "args": { "kind": "refactor.change.signature", "apply": "ifSingle" },
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+alt+m",
        "command": "editor.action.codeAction",
        "when": "editorTextFocus",
        "intellij": "Extract Method",
        "args": { "kind": "refactor.extract.function", "apply": "ifSingle" }
    },
    {
        "key": "ctrl+alt+v",
        "command": "editor.action.codeAction",
        "when": "editorTextFocus",
        "intellij": "Extract Variable",
        "args": { "kind": "refactor.extract.variable", "apply": "ifSingle" }
    },
    {
        "key": "ctrl+alt+f",
        "command": "editor.action.codeAction",
        "when": "editorTextFocus",
        "intellij": "Extract Field",
        "args": { "kind": "refactor.extract.field", "apply": "ifSingle" }
    },
    {
        "key": "ctrl+alt+c",
        "command": "editor.action.codeAction",
        "when": "editorTextFocus",
        "intellij": "Extract Constant",
        "args": { "kind": "refactor.extract.constant", "apply": "ifSingle" }
    },
    {
        "key": "ctrl+alt+p",
        "command": "editor.action.codeAction",
        "when": "editorTextFocus",
        "args": { "kind": "refactor.introduce.parameter", "apply": "ifSingle" },
        "intellij": "Introduce Parameter"
    },
    {
        "key": "ctrl+alt+k",
        "command": "git.commitAll",
        "when": "!inDebugMode && !terminalFocus"
    },
    {
        "key": "ctrl+shift+k",
        "command": "git.pushTo",
        "when": "!inDebugMode && !terminalFocus"
    },
    {
        "key": "ctrl+t",
        "command": "git.sync"
    },
    {
        "key": "ctrl+alt+z",
        "command": "git.revertSelectedRanges",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "alt+0",
        "command": "workbench.actions.view.problems"
    },
    {
        "key": "alt+1",
        "command": "workbench.view.explorer",
        "when": "!explorerViewletFocus"
    },
    {
        "key": "alt+1",
        "command": "workbench.action.toggleSidebarVisibility",
        "when": "explorerViewletFocus"
    },
    {
        "key": "alt+3",
        "command": "workbench.view.search",
        "when": "!searchViewletVisible"
    },
    {
        "key": "alt+3",
        "command": "workbench.action.toggleSidebarVisibility",
        "when": "searchViewletVisible"
    },
    {
        "key": "alt+5",
        "command": "workbench.view.debug",
        "when": "activeViewlet != 'workbench.view.debug'"
    },
    {
        "key": "alt+5",
        "command": "workbench.action.toggleSidebarVisibility",
        "when": "activeViewlet == 'workbench.view.debug'"
    },
    {
        "key": "alt+9",
        "command": "workbench.view.scm",
        "when": "activeViewlet != 'workbench.view.scm'"
    },
    {
        "key": "alt+9",
        "command": "workbench.action.toggleSidebarVisibility",
        "when": "activeViewlet == 'workbench.view.scm'"
    },
    {
        "key": "ctrl+s",
        "command": "workbench.action.files.saveAll"
    },
    {
        "key": "ctrl+`",
        "command": "workbench.action.selectTheme"
    },
    {
        "key": "ctrl+alt+s",
        "command": "workbench.action.openGlobalSettings"
    },
    {
        "key": "ctrl+alt+shift+s",
        "command": "workbench.action.tasks.configureTaskRunner"
    },
    {
        "key": "ctrl+shift+a",
        "command": "workbench.action.showCommands"
    },
    {
        "key": "ctrl+tab",
        "command": "workbench.action.quickOpenNavigateNext",
        "when": "inQuickOpen"
    },
    {
        "key": "shift+f12",
        "command": "workbench.action.resetViewLocations"
    }
]